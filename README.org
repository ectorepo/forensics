#+title:     Ectorepo: Digital Forensics
#+author:    David Conner
#+email:     noreply@te.xel.io

* WIP

This repo is a wip. I will build a Repo =default.xml= manifest soon ... but not
now, as I haven't decided on how to automate this, should doing so be
appropriate.

* Resources

** Forensics

Forensic distributions include SiFT workstation, [[https://tsurugi-linux.org/][Tsurugi Linux]] and others. These
have been collected and curated by the folks at [[https://www.sans.org/tools/sift-workstation/][SANS]]. Tons of info can be found
on their website and [[https://www.youtube.com/user/robtlee73][youtube channel]]. Their cheatsheets are pretty awesome.

Sadly, the SiFT docker image is no longer well-maintained. Also, the last time I
heavily used Tsurugi/SiFT, a direct install (not a VM) was the best way to go
for this, although I would love to get some feedback on that. At least one
reason here is to containerize your forensics workflow, so that it's tougher for
externalities to interfere.

*** Tools

|-------------------+--------------+-------------+-------------+----------+---------------|
| System : Layer -> | Physical     | Media Mgmnt | File System | File     | App           |
|-------------------+--------------+-------------+-------------+----------+---------------|
| Standard Tools    | lshw         | fdisk       | file        | file     | less/cat/grep |
|                   | lssci        | gdisk       | fsstat      | find     | xv regfmount  |
|                   | hdparm       | file -s     | fls         | ls & etc | display       |
|                   |              | mmls        |             |          |               |
|                   |              | mkfs        |             |          |               |
|-------------------+--------------+-------------+-------------+----------+---------------|
| SiFT/Autopsy/TSK  | tsk_recover  | mmls        | fsstat      | fls      | srch_strings  |
|                   | tsk_gettimes | mmcat       | icat        | fstat    |               |
|                   | sorter       | mmstat      | ils         | fcat     |               |
|                   | img_cat      |             | ifind       | hfind    |               |
|                   | img_stat     |             | istat       |          |               |
|                   | mactime      |             | blkcalc     |          |               |
|                   | sigfind      |             | blkcat      |          |               |
|                   |              |             | blkls       |          |               |
|                   |              |             | blkstat     |          |               |
|                   |              |             | jcat        |          |               |
|                   |              |             | jls         |          |               |
|-------------------+--------------+-------------+-------------+----------+---------------|

** Malware Analysis

REMnux is one of the better known toolkits for malware analysis, usually post-mortem.

*** Tools

TODO: maybe sometime soon. For now, refer to the [[https://docs.remnux.org/][REMnux docs]].


* Useful Commands

The lists of tools are copied from my handwritten notes, but are originally from
SIFT videos and other docs. Most of the descriptions are copied directly from
the man pages.

#+begin_quote
I personally don't have much experience with most of these, which
is why a summary like this would be so useful to me.
#+end_quote

** LS Star

+ lspci :: list PCI things
+ lsusb :: list USB things
+ lsblk :: list block device things
+ lsscsi :: list SCSI things
+ lsof :: list open file things
+ lshw :: list hardware things
+ lsattr :: list file attributes on a Linux second extended file system
+ chattr :: "cut the chatter. in the byeee... bye bye bye."

** Linux

+ dmesg :: examine or control the kernel ring buffer
+ free :: display amount of free and used memory in the system
+ udisks :: provides interfaces to enumerate and perform operations on disks and
  storage devices. Operates via a D-Bus API interface, but also includes
  =libudisks2= to provide more direct access to C/C++ programs
+ udisksd :: the =udisks= system daemon
+ udisksctl :: the =udisks= cmdline utility, which interacts with the daemon.
+ udisks2.conf :: the =udisks2= configuration file

** Physical Layer Utils

+ hdparm :: get/set SATA/IDE device parameters
+ dd :: "convert and copy a file" but usually used to read/write to/from devices
  directly.
+ dc3dd :: patched version of the GNU =dd= tool
+ dcfldd :: an older fork of =dd= (a bit buggy as of 2016)
+ losetup :: set up and control loop devices -- devices virtualized as
  =dev/loop*= that usually contain images copied via =dd=

** Media Management Layer Utils

+ ddrescue ::
+ fdisk :: manipulate fdisk partition table
+ gdisk :: interactive GUID partition table (GPT) manipulator
+ df :: report file system disk space usage. Included in MML tools because [the
  GNU] version of df cannot show the space available on unmounted file systems,
  because on most kinds of systems doing so requires very nonportable intimate
  knowledge of file system structures

** Super Shasum Tools For Hashing

+ md5 :: for MD5 hashes
+ sha(.*)sum :: for SHA checksums

** Input Processing/Filtering

+ file :: determine file type
+ split :: split a file into pieces
  - file-based fanout
+ tee :: for sporking things unless you'd like to foon them
  - input-based fanout
+ cat :: concatenate files and print on the standard output
+ tac :: concat and print files in reverse
+ xxd :: creates a hex dump of a given file or standard input
+ tr :: translate, squeeze, and/or delete characters from standard input,
  writing to standard output.
+ wc :: print newline, word, and byte counts for each file
+ uniq :: this tool is a very special snowflake


** Network Tools

+ nmcli :: commandline tool for controlling Network Manager
+ netstat :: print network connections, routing tables, interface statistics,
  masquerade connections, and multicast memberships
+ netcat :: cat network things (via sockets, stdin, IPv4, IPv6)
+ ss :: another utility to investigate sockets (dump socket stats; shows
  information similar to netstat, but with more capabilities for OSI layer 4
+ lsof :: listed again since it helps track network files
+ iptables :: administration tool for IPv4/IPv6 packet filtering and NAT
+ nft :: to set up, maintain and inspect packet filtering and classification
  rules in the Linux kernel, in the nftables framework. The Linux kernel
  subsystem is known as nf_tables, and ‘nf’ stands for Netfilter

** EWF Format

+ Install with =pacman -Syu libewf=. Installed on Tsurugi by default, which is
  typically where you want to do this stuff..

Used to bolster the validation of chain of custody and/or data
provenance.[fn:ewfformat] Can enable working with parts of compressed images
without decompressing the whole, which as I understand it may make it difficult
for on-image scripts to modify the image itself, were they capable of waking up
and doing so. The workflow for Org files for and On arch,

+ ewfacquire :: acquire data in the EWF format
+ ewfacquirestream :: from =stdin=, acquire data in the EWF format
+ ewfexport :: exports media data stored in EWF files
+ ewfinfo :: show metadata stored in EWF files
+ ewfmount :: mount data stored in EWF files
+ ewfrecover :: exports media data stored in EWF files which may be recovered if corrupted
+ ewfverify :: verifies media data stored in EWF files
+ ewfdebug :: debug EWF things?

** AFF Format

+ aimage :: create copies of devices in AFF format

** Misc

+ bc :: an arbitrary precision calculator language for shell script calculations

* Why now?

TODO: revise this (some large stream of consciousness blurb was pinched off)

** Or "pretty much the worst security/tech advice ever"

My laptop suspiciously crashed yesterday. I was watching a stream when my laptop
just blackscreened with the fans on. It was not thermal, but I did touch the
laptop, so it's conceivable that I knocked a TB or USB connection loose and it
just so happened to cause linux/firmware to protectively crash -- power & device
management on Apple hardware does that to protect against rogue coulombs and
large vibrations ... which admittedly needs a swift factcheck ... punny, eh?

Regardless, what happened next was strange: my laptop was just blackscreened and
repeatedly trying to hold the power button resulted in no change -- i.e. it
wouldn't turn off so who knows what TF that is.

Instantly, as one does in situations like these before details like the
[[https://en.wikipedia.org/wiki/S.M.A.R.T.]["smart" status]] have shaken out, I thinks to myself I think:

#+begin_example
Hmmmm... my other laptop HD failed the other week in quite similar circumstances
when an HD failure on that laptop prevented me from completing some work for
someone

-- i.e. it was functionally coupled to some goal/work ... but isn't everything
on your laptop(s)?.
#+end_example

So, I once watched a youtube video on UEFI boots called [[https://www.youtube.com/watch?v=MRqfPmPaNgE&t=1239s][LinuxBoot: Firmware
Tools & a Busybox in Go!]]. It turns out that "Not All Operating Systems Go To
Heaven" because quite often they reincarnate as bits passed by various means
from the terminating OS program to the UEFI (and BIOS? ... factcheck, factcheck
in paragraph 3). What this means is that when a computer crashes in mysterious
circumstances and hardware/firmware seems to be immediately affected ... you
seem what I'm saying your bootloader/grub or whatever *could theoretically* be
hacked and you should not begin to load the OS per usual ... but you can't even
allow it to reach the OS.

Occam's Razor implies the most sophisticated attacks often have
the simplest vulnerabilities:

+ Stuck in a coffeeshop with a man in the middle?
  - Toggle Wifi/DHCP randomly to get a new IP.
  - Turn your wifi off.
  - Use AdGuard DNS ... for reasons.
+ Suspect a rogue Wifi?
  - Flick your wifi on real fast like a lightswitch and record the results with
    Wireshark running on an interface with an alternate MAC address.
+ Don't know what that service or process is?
  - Kill it. KILL THEM ALL ... just kidding. Don't do that.
  - No need to worry about their logging or dependent services.
  - Don't bother with googling, running in debug or using the system tools to
    inject profiling so you can examine things like: memory, performance
    baseline, nmap, open files/pipes ... yada yada yada. Just kill it.

All of those constitute terrible advice for circumstances you should avoid from
the beginning... but /goddamn/ hackers count on like 1,000 conditional
depenencies all to /break/ software in specific ways. If they can't leave a
trace, they have to make expectations/guarantees about the usage/state/design
norms in network/OS/software/hardware. If even a handful of those expectations
are violated, they risk leaving behind more identifiable traces of their entry
in logs and elsewhere. None of that is useful to the blue team unless they are
capable of analyzing specific deviations from norms or baseline while separating
it out from the noise that their own interference may have generated in the
logs.

#+begin_example
What I'm saying is that one should channel MacGuyver from that episode of
Stargate where they blow the replicators to pieces and Thor's all like "yeah!
that was so rad when the other aliens were all like pew pow, but you were slash,
crackpow bangbangbang!"
#+end_example

It's important to balance out that paranoia yes, but what paranoia
usually means is that you lack either awareness or mechanisms of control -- viz.
you just don't know what you don't know or couldn't your do anything about it if
your transferred object of fear/dread was actually like that.

Womp, womp.

... So anyways, I end up powercycling several times before grub, but may have
failed to stop it from getting to systemd. Because these things can inject
behavior in monoidal form into OS boot process to ... well it's a long story and
checking image checksums should circumvent most of that, which would be
impressive if it were not simply provided to some script kiddie by a
bootloader/kit.

#+begin_quote
yeh, i'm probably mincing the details here. sometimes, with hardware/disks, shit
just happens. i would love to know when to stop looking though and when to start
worrying.
#+end_quote

I wanted to clear out any data preserved by UEFI/NVRAM between
power cycles by booting into Mac OS, then powercycling and switching back to
grub booting.

I have some serious problems on my system when switching to Mac OS ... so I just
don't. There are so many variables that must be interrogated to properly discern
what happens here, but it's usually that any MacOS update /will screw with the
EFI boot order in the NVRAM table that stores that data/ (TODO: what's that
called again?). These variables complicate troubleshooting because many of them
can cause similar effects. Additionally, whenever I update Mac OS -- which I did
not this time -- then grub will consistently try to boot with the wrong UUID's
attached to non-root partitions for Garuda/Arch linux.

#+begin_quote
IS THAT BIZARRE OR WHAT?

I update Mac OS and BAM! Suddenly I can't boot Linux...
#+end_quote

I may have problems using =fdisk= when I should use =gdisk= ... This gave me a
ton of trouble when trying to fix these issues in 2020. The wrong UUID's are
listed for me in =fdisk= and fixing the issue actually requires using
=arch-chroot= to reinstall grub ... or technically =garuda-chroot= since =btrfs=
still perplexes me.

#+begin_quote
Those are the usual problems and since "what looks like a duck & quacks like a
duck..." that is what I assumed even though I didn't update MacOS (which should
have absolutely nothing to do with my grub image right?).
#+end_quote

Anyways, since I was suspicious, I decided to image the disks in an airgapped
environment first. When i tested mounting the =/home= *and* =/data= partitions,
I see that *both* had a ton simultaneous block errors (potentially
unreconcilable by their journal .. i don't know). Why BOTH of them in a
situation where I literally could not power off my laptop? Instead of using
=chroot= to fix the problem, I backed up the disks, ran =e2fsck -n= to capture
the logs and then =e2fsck -a= to fix the disks. Luckily, nothing else was
required, as they mounted after that.

Badaboom, badabing, now the linux init process and systemd init are completing
and I get a login prompt. No need to update the UEFI boot order or update grub.
No other problems: the linux boot process borked because some =/etc/fstab= drive
mounts had exceeded their retries.

* Footnotes

+ [fn:ewfformat] Refining evidence containers for provenance and accurate data representation (doi: [[https://link.springer.com/content/pdf/10.1007%2F978-3-642-15506-2_16.pdf][10.1007/978-3-642-15506-2_16]])
